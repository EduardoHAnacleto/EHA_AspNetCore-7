@model EHA_AspNetCore.Models.Payments.PaymentCondition

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>PaymentCondition</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="EditWithInstalment" method="post" enctype="application/x-www-form-urlencoded" id="formAndList" data-list-name="instalmentList">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Fee" class="control-label"></label>
                <input asp-for="Fee" class="form-control" />
                <span asp-validation-for="Fee" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Discount" class="control-label"></label>
                <input asp-for="Discount" class="form-control" />
                <span asp-validation-for="Discount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Fine" class="control-label"></label>
                <input asp-for="Fine" class="form-control" />
                <span asp-validation-for="Fine" class="text-danger"></span>
            </div>
            <input type="hidden" value="@Model.Id" name="Id" />
            <input type="hidden" name="instalmentList" id="instalmentList" value="" />

            <div class="form-group">
                <input type="submit" value="Save" onsubmit="UpdateHiddenArray();" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<hr />

<div class="row">
    <div class="form-group">
        <label for="InstalmentNumber">Instalment Number</label>
        <input type="number" id="InstalmentNumber" value="1" />

        <label for="Days">Days</label>
        <input type="number" id="Days" value="0" />
        <span id="errorDays" style="color:red;"></span>

        <label for="ValuePercentage">ValuePercentage</label>
        <input type="number" id="ValuePercentage" value="0.00" />
        <span id="errorPercentage" style="color: red;"></span>

        <label for="PaymentMethodCbox">Payment Method</label>
        <select id="PaymentMethodCbox">
            @foreach (var item in (SelectList)ViewData["PaymentMethods"])
            {
                <option value="@item.Value" data-id="@item.Value">@item.Text</option>
            }
        </select>

        <label for="TotalPercentage">Total Percentage</label>
        <input type="number" id="TotalPercentage" value="0" />
        <span id="errorTotalPerc" style="color:red;"></span>

        <button type="button" id="FindPaymentMethod">Search</button>
        <button type="button" id="AddInstalment" onclick="AddInstalment()">Add</button>
    </div>
</div>
<table class="table" id="InstalmentTable">
    <thead>
        <tr>
            <th>Instalment number</th>
            <th>Days</th>
            <th>Value Percentage</th>
            <th>Payment Method</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="InstalmentTableBody">
        @foreach (var instalment in Model.InstalmentList)
        {
            <tr id="@(instalment.Number - 1)">
                <td>@instalment.Number</td>
                <td>@instalment.Days</td>
                <td>@instalment.Percentage</td>
                <td>@instalment.PaymentMethod.Name</td>
                <td button class="btn btn-sm btn-outline-info" onclick="RemoveInstalment(@(instalment.Number-1))">Remove</td>
            </tr>
        }
    </tbody>
</table>

<div class="form-group">
    <input type="submit" onsubmit="SendInstalmentArray();" value="Create" class="btn btn-primary" />
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>

<div id="modal" class="modal fade" rode="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title"></h6>
            </div>

            <div class="modal-body">
                <table id="modTable">
                </table>
            </div>
        </div>
    </div>
</div>


<div id="modalCreate" class="modal fade" rode="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="Create" asp-controller="PaymentMethods" method="post" onsubmit="event.preventDefault();">
                <div class="modal-header">
                    <h6 class="modal-title">New Payment Method</h6>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label asp-for="Name"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>

                <div class="modal-footer">
                    <div class="form-group">
                        <input type="submit" onclick="ClickSave();" id="btnSaveMethod" value="Save" class="btn btn-sm btn-outline-success" />
                        <input type="button" value="Exit" class="btn btn-sm btn-light" data-bs-dismiss="modal" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(function () {
            $("#FindPaymentMethod").click(function () {
                PaymentMethodsModal();
            });
            $("#formAndList").submit(function () {
                UpdateHiddenArray();
            });
            SetListToFormArray();
            PopulatedForm();
        });

        var instalmentsJson = "";
        var arrayInstalments = [];
        let paymentCondition = {
            Name: "",
            Fee: "",
            Discount: "",
            Fine: "",
            InstalmentList: []
        };

        function PopulatedForm() {
            document.querySelector("#TotalPercentage").value = 100;
        }

        function UpdateHiddenArray() {
            instalmentsJson = JSON.stringify(arrayInstalments);
            document.querySelector("#instalmentList").value = instalmentsJson;
        }

        function setPaymentCondition() {
            paymentCondition.Name = document.getElementById("payName").value;
            paymentCondition.Fee = document.getElementById("payFee").value;
            paymentCondition.Discount = document.getElementById("payDiscount").value;
            paymentCondition.Fine = document.getElementById("payFine").value;
            paymentCondition.InstalmentList = arrayInstalments;
        }

        function PaymentMethodsModal() {
            $.ajax({
                url: "/PaymentMethods/GetAll",
                method: "GET",
                success: function (methods) {
                    SetModal(methods);
                }
            });
        }

        function ClickSave() {
            $.ajax({
                url: "/PaymentMethods/PostNew",
                method: "POST",
                data: $("#modalCreate form").serialize(),
                success: function (data) {
                    $("#modalCreate").modal("hide");
                    $("#modalCreate form")[0].reset();
                },
                error: function (data) {
                    //Mensagem de erro
                }
            });
        }

        function SaveObject() {
            if (ValidateObject()) {
                setPaymentCondition();
                $.ajax({
                    contentType: 'application/json',
                    dataType: 'json',
                    type: 'POST',
                    url: "PassThings/",
                    data: JSON.stringify(paymentCondition),
                    success: function () {
                        console.log("success");
                    },
                    error: function () {
                        console.log("error");
                    }
                });
            }
        }

        function SendInstalmentArray() {
            console.log("sending array...");
            if (ValidateObject()) {
                setPaymentCondition();
                $.ajax({
                    contentType: 'application/json',
                    dataType: 'json',
                    type: 'POST',
                    url: "/PaymentConditions/CreateWithInstalment",
                    data: JSON.stringify(arrayInstalments),
                    success: function () {
                        console.log("array sent");
                    },
                    error: function () {
                        console.log("error on sending array");
                    }
                });
            }
        }


        function ValidateObject() {
            var totalPerc = $('#TotalPercentage').val();
            if (ValidateTotalPercentage(totalPerc)) {
                return true;
            }
            else {
                return false;
            }
        }

        function SetModal(methods) {
            console.log(methods);
            var index = 0;
            var modTable = document.getElementById("modTable");
            var table = '<table class="table table-sm table-hover table-striped table" >';
            table += '<thead>';
            table += '<tr>';
            table += '<th>Name</th>';
            table += '<th>Actions</th>';
            table += '<td button class="btn btn-sm btn-outline-info" onclick="FormCreateMethod()">New</td>';
            table += '</tr>';
            table += '</thead>';
            table += '<tbody>';

            for (index = 0; index < methods.length; index++) {
                table += '<tr id="method_' + methods[index].id + '">';
                table += '<td id="${methods[index].name}"> ' + methods[index].name + ' </td>';
                table += '<td button class="btn btn-sm btn-outline-info" onclick="TakeMethodName(' + methods[index].id + ')">Select</td>';

                table += '</tr>'
            }

            table += '</tbody>';
            table += '</table>';

            modTable.innerHTML = table;
            $('#modal').modal('show');
        }

        function TakeMethodName(id) {
            $('#modal').modal('hide');
            $("#PaymentMethodCbox").val(id);
        }

        function FormCreateMethod() {
            $('#modalCreate').modal('show');
        }

        function AddInstalment() {
            var Number = $('#InstalmentNumber').val();
            var Days = $('#Days').val();
            var Percentage = $('#ValuePercentage').val();
            var PaymentMethod = $('#PaymentMethodCbox option:selected').text();
            var PaymentMethodId = $('#PaymentMethodCbox option:selected').data("id");
            var totalPercentage = $('#TotalPercentage').val();
            var itable = $('#InstalmentTable tr:last');
            if (ValidateInstalmentCamps(Number, Days, Percentage, totalPercentage)) {
                arrayInstalments.push({ Number, Days, Percentage, PaymentMethodId, PaymentMethod });
                AddInstalmentToTable(Number, Days, Percentage, PaymentMethod);
                SetTotalPercentage(Percentage, totalPercentage);
                SetInstalmentNumber(Number);
                UpdateHiddenArray();
            }
        }

        function AddInstalmentToTable(inumber, days, percentage, method, placement) {
            var index = inumber - 1;
            var itable = $('#InstalmentTableBody tr:last');
            setTimeout(() => {
                itable.after(`
                                                <tr id= "${index}">
                                                    <td>${inumber}</td>
                                                    <td>${days}</td>
                                                    <td>${percentage}%</td>
                                                    <td>${method}</td>
                                                    <td button class="btn btn-sm btn-outline-info" onclick="RemoveInstalment(${index})">Remove</td>
                                                </tr>`)
            }, 0)
        }

        function SetInstalmentNumber(inumber) {
            var iNow = $('#InstalmentNumber').val();
            $('#InstalmentNumber').val(++iNow);
        }

        function SetTotalPercentage(percentage, totalPercentage) {
            var percN = parseFloat(percentage);
            var percT = parseFloat(totalPercentage);
            $('#TotalPercentage').val(percN + percT);
        }

        function RemakeTableInstalments() {
            var arrayCount = arrayInstalments.length;
            $('#InstalmentNumber').val(arrayCount + 1);
            setTimeout(() => {
                for (var i = arrayCount - 1; i >= 0; i--) {
                    arrayInstalments[i].Number = i + 1;
                    var inumber = arrayInstalments[i].Number;
                    var days = arrayInstalments[i].Days;
                    var percentage = arrayInstalments[i].Percentage;
                    var method = arrayInstalments[i].PaymentMethod;

                    AddInstalmentToTable(inumber, days, percentage, method);
                }
            }, 0)
        }

        function RemoveInstalment(index) {
            var percN = arrayInstalments[index].Percentage
            var totalVal = $('#TotalPercentage').val();
            $('#TotalPercentage').val(totalVal - percN);

            arrayInstalments.splice(index, 1);
            console.log(arrayInstalments);
            var tbody = document.getElementById('InstalmentTableBody');
            tbody.innerHTML = '<tr></tr>';
            RemakeTableInstalments();
        }

        function ValidateInstalmentCamps(inumber, days, percentage, totalPercentage) {
            if (ValidatePercentage(percentage, totalPercentage)
                && ValidateDays(days)) {
                return true;
            }
            else {
                return false;
            }
        }

        function ValidateTotalPercentage(totalPercentage) {
            if (totalPercentage != 100) {
                document.getElementById("errorTotalPerc").textContent = "Total percentage must have a total of 100%."
                return false;
            }
            else {
                return true;
            }
        }

        function ValidateDays(days) {
            if (days > 365) {
                document.getElementById("errorDays").textContent = "Days must not be longer than 365."
                return false;
            }
            else if (days == "" || days < 0) {
                document.getElementById("errorDays").textContent = "Days must not be lower than 0."
            }
            else return true;
        }

        function ValidatePercentage(percentage, totalPercentage) {
            var percN = parseFloat(percentage);
            var percT = parseFloat(totalPercentage);
            if (percT >= 100) {
                return false;
            }
            if ((percN + percT) > 100) {
                var resultPerc = 100 - percT;
                document.getElementById("ValuePercentage").value = resultPerc;
                document.getElementById("errorPercentage").textContent = "Total percentage must not pass 100%, the value has been set to the maximum allowed."
                return false;
            }
            else if (percN <= 0) {
                document.getElementById("errorPercentage").textContent = "Total percentage must not be lower than 1%."
                return false;
            }
            return true;
        }

        function SetListToFormArray() {
            var instalmentList = document.getElementById("InstalmentTableBody").getElementsByTagName("tr");
            var instalments = [];
            for (var i = 0; i < instalmentList.length; i++) {                
                var instalment = instalmentList[i];
                var number = parseInt(instalment.cells[0].textContent);
                var days = parseInt(instalment.cells[1].textContent);
                var percentage = parseFloat(instalment.cells[2].textContent);
                var paymentMethod = instalment.cells[3].textContent;
                var paymentMethodId = GetPaymentMethodId(paymentMethod);

                instalments.push({
                    Number: number,
                    Days: days,
                    Percentage: percentage,
                    PaymentMethodId: paymentMethodId,
                    PaymentMethod: paymentMethod
                });
            }
            arrayInstalments = instalments;
            document.querySelector("#instalmentList").value = JSON.stringify(instalments);     
        }

        function GetPaymentMethodId(text) {
            var selectElement = document.getElementById("PaymentMethodCbox");
            for (var i = 0; i < selectElement.options.length; i++) {
                var option = selectElement.options[i];
                if (option.textContent === text) {
                    return option.getAttribute("data-id");
                }
            }
            return null;
        }



    </script>
}
